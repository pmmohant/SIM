package com.lavante.sim.customer.TestScripts.Admin;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.List;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.lavante.sim.Common.Util.LavanteUtils;
import com.lavante.sim.customer.pageobjects.PageInitiator;
import com.lavante.sim.customer.pageobjects.Admin.DealLocationMapping;

public class DealLocationMappingTests extends PageInitiator {
	
	LavanteUtils lavanteUtils = new LavanteUtils();
	
	String div="";
	String warehouse="";
	String CustomerID="";
	String dealLocation ="";

	/**
	 * This class all test starts using login page and driver initialization
	 * 
	 */
	@BeforeClass
	@Parameters({ "Platform", "Browser", "Version" })
	public void navigateToLoginPage(@Optional(LavanteUtils.Platform) String Platform,
			@Optional(LavanteUtils.browser) String browser, @Optional(LavanteUtils.browserVersion) String Version)
					throws Exception {

		launchAppFromPOM(Platform, browser, Version);
		initiate();
		openAPP2();
		// Assigning the driver to the object of lavante utils
		lavanteUtils.driver = driver;

		// Login
		List<?> listofdatafrm = lavanteUtils.login("Kroger", browser);
		LinkedHashMap<String, String> LdataMap = new LinkedHashMap<String, String>();
		LdataMap = (LinkedHashMap<String, String>) listofdatafrm.get(0);
		CustomerID=(String) listofdatafrm.get(1);
		// Login
		enobjloginpage.logintoAPP(LdataMap);
		enobjhomePage.close();
		

	}
	
	@BeforeMethod()
	public void BeforeMethod() throws FileNotFoundException, IOException, SQLException{
		LinkedHashMap<String, String> LdataMap = new LinkedHashMap<String, String>();
		LdataMap.put("maintab","Admin");
		LdataMap.put("subtab","dealLocation");
		enobjhomePage.selectTab(LdataMap);
		lavanteUtils.waitForTime(3000);
		
		warehouse="Select MAX(OrganizationName) from CustomerOrganization where CustomerId="+CustomerID;
		warehouse=lavanteUtils.fetchDBdata(warehouse);
		
		div="Select MAX(OrganizationName) from CustomerOrganization where  OrganizationName not in ('"+warehouse+"') and CustomerId="+CustomerID;
		div=lavanteUtils.fetchDBdata(div);
	}
		
		
	/**
	 * ManageUsers- Add deal location mapping
	 * 
	 * @author Thejaswi
	 * @throws InvalidFormatException
	 * @throws IOException
	 */
	@Test(priority=1)
	public void addDealLocationMapping() throws Exception {
		Reporter.log("Test Started for addDealLocationMapping: " + currenttime());
		SoftAssert softAssert = new SoftAssert();
		
		LinkedHashMap<String, String> dataMap=new LinkedHashMap<String, String> ();
		
		dealLocation="Auto"+currenttime();
		
		dataMap.put("AddNew","");
		dataMap.put("Division", div);
		dataMap.put("Warehouse", warehouse);
		dataMap.put("DealLocation", dealLocation);
		
		//adding deal location mapping
		
		objDealLocation.AddDealLocationMapping(dataMap);
		dataMap.remove("AddNew");
		
		//searching newly added deal location mapping
		dataMap.put("dealLocation", dealLocation );
		objDealLocation.searchDealLocationMapping(dataMap);
		
		boolean flagAdd = false;
		boolean flagEdit = false; 
		String actualDealLocation ="";
		String actualWarehouse= "";
		String actualDivision = "";
		
		int noRecords = objDealLocation.ListDivisionName.size();
		
		int k=0;
		while(flagAdd==false&& k<50){
				
		lavanteUtils.waitForTime(5000);		
			outr: for (int i = 0; i <noRecords ; i++) {
				actualDealLocation = objDealLocation.ListDealLocationName.get(i).getText();
				actualWarehouse=objDealLocation.ListWareHouseName.get(i).getText();
				actualDivision = objDealLocation.ListDivisionName.get(i).getText();
				
				// verifying deal location mapping 
				if (actualWarehouse.equals(warehouse) && actualDivision.contains(div)) {
					flagAdd = true;
					Reporter.log("Division name created " + actualDivision + " Expected Division name " + dataMap.get("Division"),true);
					Reporter.log("Warehouse created " + actualWarehouse  + " Expected Warehouse name " + dataMap.get("Warehouse"),true);
					
					//edit deal location mapping
					click(objDealLocation.ListEditDealLocationMapping.get(i));

					dataMap.clear();
					dataMap.put("EditSave", "");
					dealLocation=dealLocation+"theas";
					dataMap.put("DealLocation", dealLocation);
					objDealLocation.fillDealLocationMapping(dataMap);
					objDealLocation.formAction(dataMap);
					lavanteUtils.waitForTime(5000);

					dataMap.put("dealLocation", dealLocation);
					objDealLocation.searchDealLocationMapping(dataMap);
					
					//verify edit
					int ek=0;
					while(flagEdit==false&& ek<50){
					for ( i = 0; i < noRecords; i++) {
							
							actualDivision = objDealLocation.ListDivisionName.get(i).getText();
							actualWarehouse = objDealLocation.ListWareHouseName.get(i).getText();
							actualDealLocation= objDealLocation.ListDealLocationName.get(i).getText();
							if (actualDealLocation.equals(actualDealLocation) && actualDealLocation.contains(dealLocation)) {
								Reporter.log("Deal Location name edited " + actualDealLocation + " Expected Deal Location " + dealLocation,true);
								Reporter.log("Division name edited " + actualDivision + " Expected Division name " + div,true);
								flagEdit = true;
								break outr;
							}
					}
					if(flagEdit==false){
						ek++;
						boolean flag=enobjhomePage.Pagination("Next");
						if(flag==false){
							ek=50001;
						}
					}
					
					}
				}
			}
			
			if(flagAdd==false){
					k++;
					boolean flag=enobjhomePage.Pagination("Next");
					if(flag==false){
						k=50001;
					}
			}
			
		}
				
		softAssert.assertTrue(flagAdd, "Deal Location name created doesn't match");
		softAssert.assertTrue(flagEdit, "Deal Location name edited doesn't match");
		softAssert.assertAll();
		Reporter.log("Test Ended at:" + currenttime());
	}
	
	
	@AfterMethod
	public void SetupAftermethod() throws FileNotFoundException, IOException, SQLException {
		lavanteUtils.refreshPage();
		
		if(dealLocation.length()>0){
			String x="delete From Division_Warehouse_Deal_Location_Map where DealLocation='"+dealLocation+"'";
			lavanteUtils.UpdateDB(x);
		}
	}
	
	@AfterClass
	public void quitApp() {
		enobjhomePage.logout();
		quitBrowser();
	}
}

		
	
		
